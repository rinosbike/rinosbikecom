{{ 'section-bike-configurator.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{%- liquid
  if section.settings.product_handle != blank
    assign configurator_product = all_products[section.settings.product_handle]
  else
    assign configurator_product = null
  endif

  if configurator_product == null and request.design_mode
    assign configurator_product = products.first
  endif

  assign product_form_id = 'product-form-' | append: section.id
-%}

{%- if configurator_product -%}
  <section class="bike-configurator-page">
    <div class="page-width">
      
      <header class="configurator-header">
        <h1 class="configurator-title">{{ section.settings.heading }}</h1>
        <p class="configurator-subtitle">{{ section.settings.subheading }}</p>
      </header>

      <div class="configurator-container">
        
        <!-- Product Media -->
        <div class="configurator-media">
          <div class="media-container">
            {%- for media in configurator_product.media -%}
              {%- if media.media_type == 'image' -%}
                <div 
                  class="configurator-image{% if forloop.first %} active{% endif %}"
                  data-media-id="{{ media.id }}"
                >
                  <img
                    src="{{ media | image_url: width: 800 }}"
                    alt="{{ media.alt | escape }}"
                    width="{{ media.width }}"
                    height="{{ media.height }}"
                    loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
                  >
                </div>
              {%- endif -%}
            {%- endfor -%}
          </div>
          
          <div class="configurator-badges">
            <div class="badge">
              {% render 'icon-location' %}
              <span>{{ 'products.product.made_in_europe' | t | default: 'Made in Europe' }}</span>
            </div>
            <div class="badge">
              {% render 'icon-calendar' %}
              <span>{{ 'products.product.warranty_years' | t | default: '2 Year Warranty' }}</span>
            </div>
            <div class="badge">
              {% render 'icon-credit-card' %}
              <span>{{ 'products.product.return_guarantee' | t | default: '14 Day Return Guarantee' }}</span>
            </div>
          </div>
        </div>

        <!-- Configuration Panel -->
        <div class="configurator-panel">
          <div class="configurator-panel-content">
            <!-- Product Title -->
            <div class="configurator-product-title">
              <h2>{{ configurator_product.title }}</h2>
            </div>

          <!-- Variant Selection -->
          <div class="configurator-variants">
            {%- form 'product', configurator_product, id: product_form_id, class: 'form', novalidate: 'novalidate', data-type: 'add-to-cart-form' -%}
              <input type="hidden" name="id" value="{{ configurator_product.selected_or_first_available_variant.id }}" class="product-variant-id">
              
              {%- for option in configurator_product.options_with_values -%}
                <div class="variant-option-group">
                  <h3 class="option-title">{{ option.name }}</h3>
                  
                  {%- if option.name contains 'Color' or option.name contains 'Farbe' -%}
                    <div class="color-options">
                      {%- for value in option.values -%}
                        {%- assign variant_for_color = configurator_product.variants | where: option.name, value | first -%}
                        <input
                          type="radio"
                          id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
                          name="options[{{ option.name }}]"
                          value="{{ value | escape }}"
                          {% if option.selected_value == value %}checked{% endif %}
                          data-variant-option="{{ option.position }}"
                        >
                        <label 
                          for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
                          class="color-swatch-label"
                          title="{{ value }}"
                        >
                          <div class="color-swatch">
                            {%- if variant_for_color.featured_media -%}
                              <img 
                                src="{{ variant_for_color.featured_media | image_url: width: 70 }}" 
                                alt="{{ value }}"
                                class="color-swatch-image"
                                width="70"
                                height="70"
                              >
                            {%- else -%}
                              <div class="color-swatch--fallback" style="--color: {% if value contains 'Black' or value contains 'Schwarz' %}#000{% elsif value contains 'Sand' %}#D4C5A0{% elsif value contains 'White' or value contains 'Weiß' %}#fff{% elsif value contains 'Red' or value contains 'Rot' %}#dc2626{% elsif value contains 'Blue' or value contains 'Blau' %}#2563eb{% elsif value contains 'Green' or value contains 'Grün' %}#16a34a{% else %}#6b7280{% endif %}"></div>
                            {%- endif -%}
                          </div>
                        </label>
                      {%- endfor -%}
                    </div>
                    
                  {%- elsif option.name contains 'Size' or option.name contains 'Größe' -%}
                    <div class="size-options">
                      {%- for value in option.values -%}
                        <input
                          type="radio"
                          id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
                          name="options[{{ option.name }}]"
                          value="{{ value | escape }}"
                          {% if option.selected_value == value %}checked{% endif %}
                          data-variant-option="{{ option.position }}"
                        >
                        <label 
                          for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
                          class="size-option-label"
                        >
                          <span class="size-value">{{ value }}</span>
                          <span class="size-label">{{ 'products.product.size' | t }}</span>
                        </label>
                      {%- endfor -%}
                    </div>
                    
                  {%- else -%}
                    <div class="default-options">
                      {%- for value in option.values -%}
                        <input
                          type="radio"
                          id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
                          name="options[{{ option.name }}]"
                          value="{{ value | escape }}"
                          {% if option.selected_value == value %}checked{% endif %}
                          data-variant-option="{{ option.position }}"
                        >
                        <label for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}">
                          {{ value }}
                        </label>
                      {%- endfor -%}
                    </div>
                  {%- endif -%}
                </div>
              {%- endfor -%}
              
            {%- endform -%}
          </div>
          </div>

          <!-- Sticky Price & Actions Section -->
          <div class="configurator-pricing">
            <div class="price-display">
              <span class="price-label">Total</span>
              <span class="price-amount">
                {{ configurator_product.selected_or_first_available_variant.price | money }}
              </span>
            </div>
            
            <div class="delivery-info-compact">
              {% render 'icon-clock' %}
              <span>{{ 'products.product.delivery_time' | t | default: 'Delivery in 7-14 days' }}</span>
            </div>
            
            <div class="configurator-actions">
              <button
                type="submit"
                form="{{ product_form_id }}"
                name="add"
                class="product-form__cart-submit"
                {% if configurator_product.selected_or_first_available_variant.available == false %}disabled{% endif %}
              >
                              <span>
                {%- if configurator_product.selected_or_first_available_variant.available -%}
                  {{ 'products.product.add_to_cart' | t }}
                {%- else -%}
                  {{ 'products.product.sold_out' | t }}
                {%- endif -%}
              </span>
                <div class="loading__spinner hidden">
                  {% render 'icon-spinner' %}
                </div>
              </button>
              
              <a href="/checkout" class="checkout-direct-btn">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <rect x="2" y="3" width="12" height="10" rx="1" stroke="currentColor" stroke-width="1.5" fill="none"/>
                  <path d="M6 7h4M8 5v4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                </svg>
                {{ 'products.product.direct_checkout' | t | default: 'Direct to Checkout' }}
              </a>
            </div>
          </div>

        </div>
      </div>
    </div>
  </section>

  <!-- Variant data for JavaScript -->
  <script type="application/json" id="product-json-{{ section.id }}">
    {{ configurator_product.variants | json }}
  </script>

{%- else -%}
  <section class="bike-configurator-page">
    <div class="page-width">
      <div class="configurator-error">
        <h2>Product not found</h2>
        <p>Please select a valid product handle in the theme settings.</p>
      </div>
    </div>
  </section>
{%- endif -%}

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Clear cart on configurator page load to prevent persistence issues
  fetch('/cart/clear.js', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    }
  }).catch(error => {
    console.log('Cart clear failed:', error);
  });

  // Force remove header elements and cart drawer via JavaScript
  const elementsToRemove = [
    '[id*="shopify-section-sections"][id*="header"]',
    '.shopify-section-header',
    '.shopify-section-group-header-group',
    '.section-header',
    '.shopify-section-header-sticky',
    '.header-wrapper',
    'sticky-header',
    '.shopify-section:has(.header)',
    '.shopify-section:has(.header-wrapper)',
    '.shopify-section:has(sticky-header)',
    'cart-drawer',
    '.cart-drawer',
    '.drawer'
  ];
  
  elementsToRemove.forEach(selector => {
    try {
      const elements = document.querySelectorAll(selector);
      elements.forEach(el => {
        if (el) {
          el.style.display = 'none';
          el.remove();
        }
      });
    } catch (e) {
      // Ignore selector errors for older browsers
    }
  });
  
  const form = document.getElementById('{{ product_form_id }}');
  if (!form) return;
  
  const variantData = JSON.parse(document.getElementById('product-json-{{ section.id }}').textContent);
  const variantIdInput = form.querySelector('.product-variant-id');
  const priceDisplay = form.querySelector('.price-amount');
  const addButton = form.querySelector('[name="add"]');
  const addButtonText = addButton?.querySelector('span');
  
  // Function to check if a combination of options has available variants
  function hasAvailableVariant(selectedOptions, optionPosition, optionValue) {
    const testOptions = [...selectedOptions];
    testOptions[optionPosition - 1] = optionValue;
    
    return variantData.some(variant => {
      const matches = variant.options.every((option, index) => {
        return testOptions[index] === undefined || option === testOptions[index];
      });
      return matches && variant.available;
    });
  }
  
  // Function to update option availability
  function updateOptionAvailability() {
    const selectedOptions = [];
    const optionInputs = form.querySelectorAll('[data-variant-option]');
    
    // Get currently selected options
    optionInputs.forEach(input => {
      if (input.checked) {
        const optionPosition = parseInt(input.dataset.variantOption);
        selectedOptions[optionPosition - 1] = input.value;
      }
    });
    
    // Update each option's availability
    optionInputs.forEach(input => {
      const optionPosition = parseInt(input.dataset.variantOption);
      const optionValue = input.value;
      const label = input.nextElementSibling;
      
      if (hasAvailableVariant(selectedOptions, optionPosition, optionValue)) {
        input.disabled = false;
        if (label) {
          label.classList.remove('option-unavailable');
          label.removeAttribute('title');
        }
      } else {
        // Don't disable currently selected options to avoid breaking the selection
        if (!input.checked) {
          input.disabled = true;
          if (label) {
            label.classList.add('option-unavailable');
            label.setAttribute('title', 'Nicht verfügbar in dieser Kombination');
          }
        }
      }
    });
  }
  
  function updateVariant() {
    // Get selected options
    const selectedOptions = [];
    const optionInputs = form.querySelectorAll('[data-variant-option]');
    
    optionInputs.forEach(input => {
      if (input.checked) {
        const optionPosition = parseInt(input.dataset.variantOption);
        selectedOptions[optionPosition - 1] = input.value;
      }
    });
    
    // Update option availability based on current selection
    updateOptionAvailability();
    
    // Find matching variant
    const selectedVariant = variantData.find(variant => {
      return variant.options.every((option, index) => option === selectedOptions[index]);
    });
    
    if (selectedVariant) {
      // Update variant ID
      if (variantIdInput) {
        variantIdInput.value = selectedVariant.id;
      }
      
      // Update price
      if (priceDisplay) {
        const price = new Intl.NumberFormat('de-DE', {
          style: 'currency',
          currency: 'EUR'
        }).format(selectedVariant.price / 100);
        priceDisplay.textContent = price;
      }
      
      // Update availability with better messaging
      if (addButton && addButtonText) {
        if (selectedVariant.available) {
          addButton.disabled = false;
          addButton.classList.remove('unavailable');
          addButtonText.textContent = '{{ 'products.product.add_to_cart' | t | escape }}';
        } else {
          addButton.disabled = true;
          addButton.classList.add('unavailable');
          addButtonText.textContent = '{{ 'products.product.sold_out' | t | escape }}';
        }
      }
      
      // Update image if variant has featured media
      if (selectedVariant.featured_media) {
        const allImages = document.querySelectorAll('.configurator-image');
        allImages.forEach(img => img.classList.remove('active'));
        
        const variantImage = document.querySelector(`[data-media-id="${selectedVariant.featured_media.id}"]`);
        if (variantImage) {
          variantImage.classList.add('active');
        }
      }
    } else {
      // No exact variant match found - disable add button
      if (addButton && addButtonText) {
        addButton.disabled = true;
        addButton.classList.add('unavailable');
        addButtonText.textContent = '{{ 'products.product.combination_unavailable' | t | default: 'Combination not available' | escape }}';
      }
    }
  }
  
  // Initialize availability check on page load
  updateOptionAvailability();
  updateVariant();
  
  // Listen for option changes
  form.addEventListener('change', updateVariant);
  
  // Handle form submission
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Check if current variant is available before submitting
    const currentVariantId = variantIdInput?.value;
    const currentVariant = variantData.find(v => v.id == currentVariantId);
    
    if (!currentVariant || !currentVariant.available) {
      if (addButtonText) addButtonText.textContent = '{{ 'products.product.not_available' | t | default: 'Not available' | escape }}';
      return;
    }
    
    const formData = new FormData(form);
    const spinner = form.querySelector('.loading__spinner');
    
    if (addButton) addButton.disabled = true;
    if (addButtonText) addButtonText.textContent = '{{ 'products.product.adding' | t | default: 'Adding...' | escape }}';
    if (spinner) spinner.classList.remove('hidden');
    
    fetch('/cart/add.js', {
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      if (data.id) {
        window.location.href = '/cart';
      } else if (data.message) {
        throw new Error(data.message);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      if (addButtonText) addButtonText.textContent = '{{ 'products.product.error_retry' | t | default: 'Error - Try again' | escape }}';
    })
    .finally(() => {
      setTimeout(() => {
        if (addButton && currentVariant && currentVariant.available) {
          addButton.disabled = false;
          if (addButtonText) addButtonText.textContent = '{{ 'products.product.add_to_cart' | t | escape }}';
        }
        if (spinner) spinner.classList.add('hidden');
      }, 1000);
    });
  });
  
  // Handle direct checkout button
  const checkoutBtn = document.querySelector('.checkout-direct-btn');
  if (checkoutBtn) {
    checkoutBtn.addEventListener('click', function(e) {
      e.preventDefault();
      
      // Check if current variant is available before checkout
      const currentVariantId = variantIdInput?.value;
      const currentVariant = variantData.find(v => v.id == currentVariantId);
      
      if (!currentVariant || !currentVariant.available) {
        alert('{{ 'products.product.configuration_unavailable' | t | default: 'This configuration is not available. Please select a different combination.' | escape }}');
        return;
      }
      
      const formData = new FormData(form);
      
      // Add to cart first, then redirect to checkout
      fetch('/cart/add.js', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.id) {
          window.location.href = '/checkout';
        } else if (data.message) {
          alert('{{ 'products.product.cart_error' | t | default: 'Error adding to cart' | escape }}: ' + data.message);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('{{ 'products.product.general_error' | t | default: 'An error occurred. Please try again.' | escape }}');
      });
    });
  }
});
</script>

{% schema %}
{
  "name": "Bike Configurator Page",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "product_handle",
      "label": "Product handle",
      "info": "Enter the handle of the product to configure"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Configure Your Bike"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading",
      "default": "Customize your bike to your exact specifications"
    }
  ],
  "presets": [
    {
      "name": "Bike Configurator Page"
    }
  ]
}
{% endschema %} 